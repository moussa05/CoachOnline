// <auto-generated />
using System;
using CoachOnline.Implementation;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace CoachOnline.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220412193345_payout_by_paypal_for_coaches")]
    partial class payout_by_paypal_for_coaches
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseSerialColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("CoachOnline.Model.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseSerialColumn();

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("CoachOnline.Model.AdminLogin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseSerialColumn();

                    b.Property<int?>("AdminId")
                        .HasColumnType("integer");

                    b.Property<string>("AuthToken")
                        .HasColumnType("text");

                    b.Property<DateTime>("LoggedIn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("AdminLogin");
                });

            modelBuilder.Entity("CoachOnline.Model.Affiliate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseSerialColumn();

                    b.Property<byte>("AffiliateModelType")
                        .HasColumnType("smallint");

                    b.Property<int>("AffiliateUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("HostUserId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsAffiliateACoach")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Affiliates");
                });

            modelBuilder.Entity("CoachOnline.Model.AffiliateLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseSerialColumn();

                    b.Property<string>("CouponCode")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("ForCoach")
                        .HasColumnType("boolean");

                    b.Property<string>("GeneratedLink")
                        .HasColumnType("text");

                    b.Property<string>("GeneratedToken")
                        .HasColumnType("text");

                    b.Property<bool>("LimitedPageView")
                        .HasColumnType("boolean");

                    b.Property<string>("ReturnUrl")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<bool>("WithTrialPlans")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AffiliateLinks");
                });

            modelBuilder.Entity("CoachOnline.Model.AffiliatePayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseSerialColumn();

                    b.Property<int>("AffiliateId")
                        .HasColumnType("integer");

                    b.Property<byte>("AffiliateModelType")
                        .HasColumnType("smallint");

                    b.Property<int?>("DirectHostPayIdRef")
                        .HasColumnType("integer");

                    b.Property<bool>("FirstGeneration")
                        .HasColumnType("boolean");

                    b.Property<bool>("FullYearPayment")
                        .HasColumnType("boolean");

                    b.Property<int>("HostId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsAffiliateCoach")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFirstPayment")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("NextPlannedPaymentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PayPalPayoutId")
                        .HasColumnType("text");

                    b.Property<DateTime>("PaymentCreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PaymentCurrency")
                        .HasColumnType("text");

                    b.Property<DateTime>("PaymentForMonth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("PaymentValue")
                        .HasColumnType("numeric");

                    b.Property<int?>("RequestedPaymentId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("TransferDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Transferred")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("RequestedPaymentId");

                    b.HasIndex("AffiliateId", "HostId", "PaymentForMonth");

                    b.ToTable("AffiliatePayments");
                });

            modelBuilder.Entity("CoachOnline.Model.B2BAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseSerialColumn();

                    b.Property<string>("AccountName")
                        .HasColumnType("text");

                    b.Property<byte>("AccountStatus")
                        .HasColumnType("smallint");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<decimal?>("Comission")
                        .HasColumnType("numeric");

                    b.Property<string>("ComissionCurrency")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ContractSignDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("ContractSigned")
                        .HasColumnType("boolean");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Login")
                        .HasColumnType("text");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.Property<string>("StreetNo")
                        .HasColumnType("text");

                    b.Property<string>("Website")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("B2BAccounts");
                });

            modelBuilder.Entity("CoachOnline.Model.B2BAccountService", b =>
                {
                    b.Property<int>("B2BAccountId")
                        .HasColumnType("integer");

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Comission")
                        .HasColumnType("numeric");

                    b.Property<string>("ComissionCurrency")
                        .HasColumnType("text");

                    b.HasKey("B2BAccountId", "ServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("B2BAccountServices");
                });

            modelBuilder.Entity("CoachOnline.Model.B2BAcessToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseSerialColumn();

                    b.Property<int>("B2BAccountId")
                        .HasColumnType("integer");

                    b.Property<long>("Created")
                        .HasColumnType("bigint");

                    b.Property<bool>("Disposed")
                        .HasColumnType("boolean");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<long>("ValidTo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("B2BAccountId");

                    b.ToTable("B2BAccountTokens");
                });

            modelBuilder.Entity("CoachOnline.Model.B2BPricing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseSerialColumn();

                    b.Property<byte>("AccessType")
                        .HasColumnType("smallint");

                    b.Property<string>("Currency")
                        .HasColumnType("text");

                    b.Property<int>("NumberOfActiveUsers")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("PricingName")
                        .HasColumnType("text");

                    b.Property<byte>("TimePeriod")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("B2BPricings");
                });

            modelBuilder.Entity("CoachOnline.Model.B2BSalesPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseSerialColumn();

                    b.Property<int>("B2BAccountId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Fname")
                        .HasColumnType("text");

                    b.Property<string>("Lname")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("text");

                    b.Property<string>("ProfilePicUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("B2BAccountId");

                    b.ToTable("B2BSalesPersons");
                });

            modelBuilder.Entity("CoachOnline.Model.BillingPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseSerialColumn();

                    b.Property<decimal?>("AmountPerMonth")
                        .HasColumnType("numeric");

                    b.Property<byte>("BillingOption")
                        .HasColumnType("smallint");

                    b.Property<string>("Currency")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("StripePriceId")
                        .HasColumnType("text");

                    b.Property<string>("StripeProductId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BillingPlans");
                });

            modelBuilder.Entity("CoachOnline.Model.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseSerialColumn();

                    b.Property<bool>("AdultOnly")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("UserId");

                    b.ToTable("courseCategories");
                });

            modelBuilder.Entity("CoachOnline.Model.CoachBalanceDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseSerialColumn();

                    b.Property<DateTime>("BalanceDay")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("BalanceValue")
                        .HasColumnType("numeric");

                    b.Property<bool>("Calculated")
                        .HasColumnType("boolean");

                    b.Property<int>("CoachBalanceMonthId")
                        .HasColumnType("integer");

                    b.Property<string>("PayPalPayoutId")
                        .HasColumnType("text");

                    b.Property<bool?>("PayoutViaPaypal")
                        .HasColumnType("boolean");

                    b.Property<int?>("RequestedPaymentId")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalEpisodesWatchTime")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("TransferDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Transferred")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("CoachBalanceMonthId");

                    b.HasIndex("RequestedPaymentId");

                    b.ToTable("CoachDailyBalance");
                });

            modelBuilder.Entity("CoachOnline.Model.CoachBalanceMonth", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseSerialColumn();

                    b.Property<int>("CoachId")
                        .HasColumnType("integer");

                    b.Property<int>("Month")
                        .HasColumnType("integer");

                    b.Property<int>("MonthlyBalanceId")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalMonthBalance")
                        .HasColumnType("numeric");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.HasIndex("MonthlyBalanceId");

                    b.ToTable("CoachMonthlyBalance");
                });

            modelBuilder.Entity("CoachOnline.Model.CompanyInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseSerialColumn();

                    b.Property<string>("BICNumber")
                        .HasColumnType("text");

                    b.Property<string>("BankAccountNumber")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("RegisterAddress")
                        .HasColumnType("text");

                    b.Property<string>("SiretNumber")
                        .HasColumnType("text");

                    b.Property<string>("VatNumber")
                        .HasColumnType("text");

                    b.Property<string>("ZipCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CompanyInfo");
                });

            modelBuilder.Entity("CoachOnline.Model.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseSerialColumn();

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("CoachOnline.Model.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseSerialColumn();

                    b.Property<string>("BannerPhotoUrl")
                        .HasColumnType("text");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<long>("Created")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool?>("HasPromo")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("text");

                    b.Property<int?>("PublishedCount")
                        .HasColumnType("integer");

                    b.Property<byte>("State")
                        .HasColumnType("smallint");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("courses");
                });

            modelBuilder.Entity("CoachOnline.Model.CourseComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseSerialColumn();

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<int>("CommentLevel")
                        .HasColumnType("integer");

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsCommentatorAuthorOfCourse")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ParentCommentId")
                        .HasColumnType("integer");

                    b.Property<int?>("ReplyCommentId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("UserId");

                    b.ToTable("CourseComments");
                });

            modelBuilder.Entity("CoachOnline.Model.CourseEval", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseSerialColumn();

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsLiked")
                        .HasColumnType("boolean");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("CourseId", "UserId");

                    b.ToTable("CourseEvals");
                });

            modelBuilder.Entity("CoachOnline.Model.Episode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseSerialColumn();

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.Property<long>("Created")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<byte>("EpisodeState")
                        .HasColumnType("smallint");

                    b.Property<bool?>("IsPromo")
                        .HasColumnType("boolean");

                    b.Property<string>("MediaId")
                        .HasColumnType("text");

                    b.Property<double>("MediaLenght")
                        .HasColumnType("double precision");

                    b.Property<bool>("MediaNeedsConverting")
                        .HasColumnType("boolean");

                    b.Property<int>("OrdinalNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Episodes");
                });

            modelBuilder.Entity("CoachOnline.Model.EpisodeAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseSerialColumn();

                    b.Property<long>("Added")
                        .HasColumnType("bigint");

                    b.Property<int>("EpisodeId")
                        .HasColumnType("integer");

                    b.Property<string>("Extension")
                        .HasColumnType("text");

                    b.Property<string>("Hash")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EpisodeId");

                    b.ToTable("EpisodeAttachments");
                });

            modelBuilder.Entity("CoachOnline.Model.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseSerialColumn();

                    b.Property<int>("CoachId")
                        .HasColumnType("integer");

                    b.Property<string>("CoachLiveToken")
                        .HasColumnType("text");

                    b.Property<string>("CoverPictrueUrl")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Currency")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EventChannelName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("PersonQty")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("CoachOnline.Model.EventAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseSerialColumn();

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<string>("Extension")
                        .HasColumnType("text");

                    b.Property<string>("Hash")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventAttachments");
                });

            modelBuilder.Entity("CoachOnline.Model.EventCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseSerialColumn();

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("EventId");

                    b.ToTable("EventCategories");
                });

            modelBuilder.Entity("CoachOnline.Model.EventParticipant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseSerialColumn();

                    b.Property<DateTime>("AssignDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Currency")
                        .HasColumnType("text");

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<string>("EventLiveToken")
                        .HasColumnType("text");

                    b.Property<string>("PayIntentId")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("EventParticipants");
                });

            modelBuilder.Entity("CoachOnline.Model.EventPartner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseSerialColumn();

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<string>("PartnerName")
                        .HasColumnType("text");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventPartners");
                });

            modelBuilder.Entity("CoachOnline.Model.FAQCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseSerialColumn();

                    b.Property<string>("CategoryName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FAQCategories");
                });

            modelBuilder.Entity("CoachOnline.Model.FAQTopic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseSerialColumn();

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .HasColumnType("text");

                    b.Property<string>("Topic")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("FAQTopics");
                });

            modelBuilder.Entity("CoachOnline.Model.FlaggedCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseSerialColumn();

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("OrderNo")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("FlaggedCourses");
                });

            modelBuilder.Entity("CoachOnline.Model.LibraryAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseSerialColumn();

                    b.Property<byte>("AccountStatus")
                        .HasColumnType("smallint");

                    b.Property<int>("B2BAccountId")
                        .HasColumnType("integer");

                    b.Property<int?>("BooksNo")
                        .HasColumnType("integer");

                    b.Property<int?>("CdsNo")
                        .HasColumnType("integer");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("InstitutionUrl")
                        .HasColumnType("text");

                    b.Property<string>("LibraryName")
                        .HasColumnType("text");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.Property<int?>("ReadersNo")
                        .HasColumnType("integer");

                    b.Property<string>("SIGBName")
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.Property<string>("StreetNo")
                        .HasColumnType("text");

                    b.Property<int?>("VideosNo")
                        .HasColumnType("integer");

                    b.Property<string>("Website")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("B2BAccountId");

                    b.ToTable("LibraryAccounts");
                });

            modelBuilder.Entity("CoachOnline.Model.LibraryAcessToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseSerialColumn();

                    b.Property<long>("Created")
                        .HasColumnType("bigint");

                    b.Property<bool>("Disposed")
                        .HasColumnType("boolean");

                    b.Property<int>("LibraryAccountId")
                        .HasColumnType("integer");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<long>("ValidTo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("LibraryAccountId");

                    b.ToTable("LibraryAccessTokens");
                });

            modelBuilder.Entity("CoachOnline.Model.LibraryReferent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseSerialColumn();

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Fname")
                        .HasColumnType("text");

                    b.Property<int>("LibraryAccountId")
                        .HasColumnType("integer");

                    b.Property<string>("Lname")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("text");

                    b.Property<string>("ProfilePicUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LibraryAccountId");

                    b.ToTable("LibraryReferents");
                });

            modelBuilder.Entity("CoachOnline.Model.LibrarySubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseSerialColumn();

                    b.Property<byte>("AccessType")
                        .HasColumnType("smallint");

                    b.Property<bool>("AutoRenew")
                        .HasColumnType("boolean");

                    b.Property<string>("Currency")
                        .HasColumnType("text");

                    b.Property<bool?>("IsProlonged")
                        .HasColumnType("boolean");

                    b.Property<int>("LibraryId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("NegotiatedPrice")
                        .HasColumnType("numeric");

                    b.Property<int>("NumberOfActiveUsers")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("PricePlanId")
                        .HasColumnType("integer");

                    b.Property<string>("PricingName")
                        .HasColumnType("text");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("SubscriptionEnd")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("SubscriptionStart")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte>("TimePeriod")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("LibraryId");

                    b.HasIndex("PricePlanId");

                    b.ToTable("LibrarySubscriptions");
                });

            modelBuilder.Entity("CoachOnline.Model.MonthlyBalance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseSerialColumn();

                    b.Property<decimal>("BalancaeForWithdrawals")
                        .HasColumnType("numeric");

                    b.Property<long>("BalanceFull")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CalculationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Currency")
                        .HasColumnType("text");

                    b.Property<decimal>("Fees")
                        .HasColumnType("numeric");

                    b.Property<int>("Month")
                        .HasColumnType("integer");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Month", "Year");

                    b.ToTable("MonthlyBalances");
                });

            modelBuilder.Entity("CoachOnline.Model.PendingCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseSerialColumn();

                    b.Property<bool>("AdultOnly")
                        .HasColumnType("boolean");

                    b.Property<string>("CategoryName")
                        .HasColumnType("text");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("integer");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.Property<string>("RejectReason")
                        .HasColumnType("text");

                    b.Property<byte>("State")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("PendingCategories");
                });

            modelBuilder.Entity("CoachOnline.Model.Profession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseSerialColumn();

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Professions");
                });

            modelBuilder.Entity("CoachOnline.Model.PromoCoupon", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<decimal?>("AmountOff")
                        .HasColumnType("numeric");

                    b.Property<bool>("AvailableForInfluencers")
                        .HasColumnType("boolean");

                    b.Property<string>("Currency")
                        .HasColumnType("text");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<int?>("DurationInMonths")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("PercentOff")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PromoCoupons");
                });

            modelBuilder.Entity("CoachOnline.Model.Questionnaire", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseSerialColumn();

                    b.Property<string>("Question")
                        .HasColumnType("text");

                    b.Property<byte>("QuestionnaireType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("Questionnaires");
                });

            modelBuilder.Entity("CoachOnline.Model.QuestionnaireAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseSerialColumn();

                    b.Property<string>("OtherResponse")
                        .HasColumnType("text");

                    b.Property<int>("QuestionnaireId")
                        .HasColumnType("integer");

                    b.Property<int>("ResponseId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("QuestionnaireId");

                    b.HasIndex("ResponseId");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionnaireAnswers");
                });

            modelBuilder.Entity("CoachOnline.Model.QuestionnaireOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseSerialColumn();

                    b.Property<bool>("IsOtherOption")
                        .HasColumnType("boolean");

                    b.Property<string>("Option")
                        .HasColumnType("text");

                    b.Property<int?>("QuestionnaireId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("QuestionnaireId");

                    b.ToTable("QuestionnaireOptions");
                });

            modelBuilder.Entity("CoachOnline.Model.Rejection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseSerialColumn();

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.Property<long>("Date")
                        .HasColumnType("bigint");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Rejection");
                });

            modelBuilder.Entity("CoachOnline.Model.RequestedPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseSerialColumn();

                    b.Property<string>("Currency")
                        .HasColumnType("text");

                    b.Property<string>("PayPalEmail")
                        .HasColumnType("text");

                    b.Property<string>("PayPalPayerId")
                        .HasColumnType("text");

                    b.Property<string>("PayPalPhone")
                        .HasColumnType("text");

                    b.Property<byte>("PaymentType")
                        .HasColumnType("smallint");

                    b.Property<decimal>("PaymentValue")
                        .HasColumnType("numeric");

                    b.Property<string>("RejectReason")
                        .HasColumnType("text");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("StatusChangeDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("RequestedPayments");
                });

            modelBuilder.Entity("CoachOnline.Model.Student.UserEpisodeAttachemntPermission", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("MediaId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CurrentToken")
                        .HasColumnType("text");

                    b.HasKey("UserId", "MediaId");

                    b.ToTable("UserEpisodeAttachemntPermissions");
                });

            modelBuilder.Entity("CoachOnline.Model.StudentCardRejection", b =>
                {
                    b.Property<int>("SubscriptionId")
                        .HasColumnType("integer");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.HasKey("SubscriptionId");

                    b.ToTable("StudentCardRejection");
                });

            modelBuilder.Entity("CoachOnline.Model.StudentCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseSerialColumn();

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FirstOpenedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LastOpenedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentOpenedCourses");
                });

            modelBuilder.Entity("CoachOnline.Model.StudentEpisode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseSerialColumn();

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.Property<int>("EpisodeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FirstOpenDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LastWatchDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("StoppedAtTimestamp")
                        .HasColumnType("numeric");

                    b.Property<int?>("StudentCourseId")
                        .HasColumnType("integer");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.Property<byte>("WatchedStatus")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("EpisodeId");

                    b.HasIndex("StudentCourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentOpenedEpisodes");
                });

            modelBuilder.Entity("CoachOnline.Model.SubscriptionPrice", b =>
                {
                    b.Property<int>("BillingPlanId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("Currency")
                        .HasColumnType("text");

                    b.Property<int?>("Period")
                        .HasColumnType("integer");

                    b.Property<string>("PeriodType")
                        .HasColumnType("text");

                    b.Property<bool>("Reccuring")
                        .HasColumnType("boolean");

                    b.Property<string>("StripePriceId")
                        .HasColumnType("text");

                    b.Property<int>("TrialDays")
                        .HasColumnType("integer");

                    b.HasKey("BillingPlanId");

                    b.ToTable("SubscriptionPrice");
                });

            modelBuilder.Entity("CoachOnline.Model.SuggestedCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseSerialColumn();

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDay")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("WatchedTime")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("SuggestedCourses");
                });

            modelBuilder.Entity("CoachOnline.Model.Terms", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseSerialColumn();

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Terms");
                });

            modelBuilder.Entity("CoachOnline.Model.TwoFATokens", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseSerialColumn();

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("text");

                    b.Property<bool>("Deactivated")
                        .HasColumnType("boolean");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.Property<long>("ValidateTo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("twoFATokens");
                });

            modelBuilder.Entity("CoachOnline.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseSerialColumn();

                    b.Property<DateTime?>("AccountCreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Adress")
                        .HasColumnType("text");

                    b.Property<byte>("AffiliatorType")
                        .HasColumnType("smallint");

                    b.Property<bool>("AllowHiddenProducts")
                        .HasColumnType("boolean");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text");

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<string>("CouponId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CouponValidDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<int?>("InstitutionId")
                        .HasColumnType("integer");

                    b.Property<string>("Nick")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("PayPalPayerEmail")
                        .HasColumnType("text");

                    b.Property<string>("PayPalPayerId")
                        .HasColumnType("text");

                    b.Property<string>("PayPalPayerPhone")
                        .HasColumnType("text");

                    b.Property<bool>("PaymentsEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.Property<int?>("ProfessionId")
                        .HasColumnType("integer");

                    b.Property<string>("Region")
                        .HasColumnType("text");

                    b.Property<string>("SocialAccountId")
                        .HasColumnType("text");

                    b.Property<bool?>("SocialLogin")
                        .HasColumnType("boolean");

                    b.Property<string>("SocialProvider")
                        .HasColumnType("text");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("StripeAccountId")
                        .HasColumnType("text");

                    b.Property<string>("StripeCustomerId")
                        .HasColumnType("text");

                    b.Property<bool>("SubscriptionActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.Property<int?>("TermsAcceptedId")
                        .HasColumnType("integer");

                    b.Property<byte>("UserRole")
                        .HasColumnType("smallint");

                    b.Property<bool>("WithdrawalsEnabled")
                        .HasColumnType("boolean");

                    b.Property<int?>("YearOfBirth")
                        .HasColumnType("integer");

                    b.Property<int?>("companyInfoId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TermsAcceptedId");

                    b.HasIndex("companyInfoId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("CoachOnline.Model.UserBillingPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseSerialColumn();

                    b.Property<DateTime?>("ActivationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("BillingPlanTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("CouponId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsStudent")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("PlannedActivationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("QuestionaaireCancelReason")
                        .HasColumnType("integer");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("StripePriceId")
                        .HasColumnType("text");

                    b.Property<string>("StripeProductId")
                        .HasColumnType("text");

                    b.Property<string>("StripeSubscriptionId")
                        .HasColumnType("text");

                    b.Property<string>("StripeSubscriptionScheduleId")
                        .HasColumnType("text");

                    b.Property<byte>("StudentCardVerificationStatus")
                        .HasColumnType("smallint");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BillingPlanTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("UserBillingPlans");
                });

            modelBuilder.Entity("CoachOnline.Model.UserLogins", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseSerialColumn();

                    b.Property<string>("AuthToken")
                        .HasColumnType("text");

                    b.Property<long>("Created")
                        .HasColumnType("bigint");

                    b.Property<string>("DeviceInfo")
                        .HasColumnType("text");

                    b.Property<bool>("Disposed")
                        .HasColumnType("boolean");

                    b.Property<string>("HubConnectionId")
                        .HasColumnType("text");

                    b.Property<string>("IpAddress")
                        .HasColumnType("text");

                    b.Property<bool>("IsAllowedToWatch")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastActivityDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PlaceInfo")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<long>("ValidTo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("userLogins");
                });

            modelBuilder.Entity("CoachOnline.Model.UserStudentCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseSerialColumn();

                    b.Property<string>("StudentsCardPhotoName")
                        .HasColumnType("text");

                    b.Property<int>("UserBillingPlanId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserBillingPlanId");

                    b.ToTable("UserStudentCard");
                });

            modelBuilder.Entity("CoachOnline.Model.UserWatchedEpisode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseSerialColumn();

                    b.Property<DateTime>("Day")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("EpisodeDuration")
                        .HasColumnType("numeric");

                    b.Property<int>("EpisodeId")
                        .HasColumnType("integer");

                    b.Property<decimal>("EpisodeWatchedTime")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsWatched")
                        .HasColumnType("boolean");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("UserWatchedEpisodes");
                });

            modelBuilder.Entity("CoachOnline.Model.AdminLogin", b =>
                {
                    b.HasOne("CoachOnline.Model.Admin", null)
                        .WithMany("AdminLogins")
                        .HasForeignKey("AdminId");
                });

            modelBuilder.Entity("CoachOnline.Model.AffiliateLink", b =>
                {
                    b.HasOne("CoachOnline.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoachOnline.Model.AffiliatePayment", b =>
                {
                    b.HasOne("CoachOnline.Model.RequestedPayment", "RequestedPayment")
                        .WithMany("Payments")
                        .HasForeignKey("RequestedPaymentId");

                    b.Navigation("RequestedPayment");
                });

            modelBuilder.Entity("CoachOnline.Model.B2BAccountService", b =>
                {
                    b.HasOne("CoachOnline.Model.B2BAccount", "B2BAccount")
                        .WithMany("AvailableServices")
                        .HasForeignKey("B2BAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoachOnline.Model.B2BPricing", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("B2BAccount");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("CoachOnline.Model.B2BAcessToken", b =>
                {
                    b.HasOne("CoachOnline.Model.B2BAccount", "B2BAccount")
                        .WithMany("AccessTokens")
                        .HasForeignKey("B2BAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("B2BAccount");
                });

            modelBuilder.Entity("CoachOnline.Model.B2BSalesPerson", b =>
                {
                    b.HasOne("CoachOnline.Model.B2BAccount", "B2BAccount")
                        .WithMany("AccountSalesPersons")
                        .HasForeignKey("B2BAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("B2BAccount");
                });

            modelBuilder.Entity("CoachOnline.Model.Category", b =>
                {
                    b.HasOne("CoachOnline.Model.Category", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.HasOne("CoachOnline.Model.User", null)
                        .WithMany("AccountCategories")
                        .HasForeignKey("UserId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("CoachOnline.Model.CoachBalanceDay", b =>
                {
                    b.HasOne("CoachOnline.Model.CoachBalanceMonth", "CoachBalanceMonth")
                        .WithMany("DayBalances")
                        .HasForeignKey("CoachBalanceMonthId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoachOnline.Model.RequestedPayment", "RequestedPayment")
                        .WithMany("CoachPayments")
                        .HasForeignKey("RequestedPaymentId");

                    b.Navigation("CoachBalanceMonth");

                    b.Navigation("RequestedPayment");
                });

            modelBuilder.Entity("CoachOnline.Model.CoachBalanceMonth", b =>
                {
                    b.HasOne("CoachOnline.Model.User", "Coach")
                        .WithMany()
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoachOnline.Model.MonthlyBalance", "MonthlyBalance")
                        .WithMany()
                        .HasForeignKey("MonthlyBalanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coach");

                    b.Navigation("MonthlyBalance");
                });

            modelBuilder.Entity("CoachOnline.Model.Course", b =>
                {
                    b.HasOne("CoachOnline.Model.Category", "Category")
                        .WithMany("CategoryCourses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoachOnline.Model.User", "User")
                        .WithMany("OwnedCourses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoachOnline.Model.CourseComment", b =>
                {
                    b.HasOne("CoachOnline.Model.Course", "Course")
                        .WithMany("Comments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoachOnline.Model.CourseComment", "ParentComment")
                        .WithMany("Responses")
                        .HasForeignKey("ParentCommentId");

                    b.HasOne("CoachOnline.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("ParentComment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoachOnline.Model.CourseEval", b =>
                {
                    b.HasOne("CoachOnline.Model.Course", "Course")
                        .WithMany("Evaluations")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoachOnline.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoachOnline.Model.Episode", b =>
                {
                    b.HasOne("CoachOnline.Model.Course", "Course")
                        .WithMany("Episodes")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("CoachOnline.Model.EpisodeAttachment", b =>
                {
                    b.HasOne("CoachOnline.Model.Episode", "Episode")
                        .WithMany("Attachments")
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Episode");
                });

            modelBuilder.Entity("CoachOnline.Model.Event", b =>
                {
                    b.HasOne("CoachOnline.Model.User", "Coach")
                        .WithMany()
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("CoachOnline.Model.EventAttachment", b =>
                {
                    b.HasOne("CoachOnline.Model.Event", "Event")
                        .WithMany("Attachments")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("CoachOnline.Model.EventCategory", b =>
                {
                    b.HasOne("CoachOnline.Model.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoachOnline.Model.Event", "Event")
                        .WithMany("Categories")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("CoachOnline.Model.EventParticipant", b =>
                {
                    b.HasOne("CoachOnline.Model.Event", "Event")
                        .WithMany("Participants")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoachOnline.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoachOnline.Model.EventPartner", b =>
                {
                    b.HasOne("CoachOnline.Model.Event", "Event")
                        .WithMany("Partners")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("CoachOnline.Model.FAQTopic", b =>
                {
                    b.HasOne("CoachOnline.Model.FAQCategory", "Category")
                        .WithMany("Topics")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("CoachOnline.Model.FlaggedCourse", b =>
                {
                    b.HasOne("CoachOnline.Model.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("CoachOnline.Model.LibraryAccount", b =>
                {
                    b.HasOne("CoachOnline.Model.B2BAccount", "B2BAccount")
                        .WithMany()
                        .HasForeignKey("B2BAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("B2BAccount");
                });

            modelBuilder.Entity("CoachOnline.Model.LibraryAcessToken", b =>
                {
                    b.HasOne("CoachOnline.Model.LibraryAccount", "LibraryAccount")
                        .WithMany("AccessTokens")
                        .HasForeignKey("LibraryAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LibraryAccount");
                });

            modelBuilder.Entity("CoachOnline.Model.LibraryReferent", b =>
                {
                    b.HasOne("CoachOnline.Model.LibraryAccount", "LibraryAccount")
                        .WithMany("Referents")
                        .HasForeignKey("LibraryAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LibraryAccount");
                });

            modelBuilder.Entity("CoachOnline.Model.LibrarySubscription", b =>
                {
                    b.HasOne("CoachOnline.Model.LibraryAccount", "Library")
                        .WithMany("Subscriptions")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoachOnline.Model.B2BPricing", "PricePlan")
                        .WithMany()
                        .HasForeignKey("PricePlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Library");

                    b.Navigation("PricePlan");
                });

            modelBuilder.Entity("CoachOnline.Model.PendingCategory", b =>
                {
                    b.HasOne("CoachOnline.Model.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("CoachOnline.Model.QuestionnaireAnswer", b =>
                {
                    b.HasOne("CoachOnline.Model.Questionnaire", "Questionnaire")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionnaireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoachOnline.Model.QuestionnaireOption", "Response")
                        .WithMany()
                        .HasForeignKey("ResponseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoachOnline.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Questionnaire");

                    b.Navigation("Response");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoachOnline.Model.QuestionnaireOption", b =>
                {
                    b.HasOne("CoachOnline.Model.Questionnaire", "Questionnaire")
                        .WithMany("Options")
                        .HasForeignKey("QuestionnaireId");

                    b.Navigation("Questionnaire");
                });

            modelBuilder.Entity("CoachOnline.Model.Rejection", b =>
                {
                    b.HasOne("CoachOnline.Model.Course", "Course")
                        .WithMany("RejectionsHistory")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("CoachOnline.Model.StudentCardRejection", b =>
                {
                    b.HasOne("CoachOnline.Model.UserBillingPlan", "Subscription")
                        .WithOne("StudentCardRejection")
                        .HasForeignKey("CoachOnline.Model.StudentCardRejection", "SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("CoachOnline.Model.StudentCourse", b =>
                {
                    b.HasOne("CoachOnline.Model.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoachOnline.Model.User", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("CoachOnline.Model.StudentEpisode", b =>
                {
                    b.HasOne("CoachOnline.Model.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoachOnline.Model.Episode", "Episode")
                        .WithMany()
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoachOnline.Model.StudentCourse", null)
                        .WithMany("StudentEpisodes")
                        .HasForeignKey("StudentCourseId");

                    b.HasOne("CoachOnline.Model.User", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Episode");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("CoachOnline.Model.SubscriptionPrice", b =>
                {
                    b.HasOne("CoachOnline.Model.BillingPlan", null)
                        .WithOne("Price")
                        .HasForeignKey("CoachOnline.Model.SubscriptionPrice", "BillingPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoachOnline.Model.SuggestedCourse", b =>
                {
                    b.HasOne("CoachOnline.Model.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("CoachOnline.Model.TwoFATokens", b =>
                {
                    b.HasOne("CoachOnline.Model.User", null)
                        .WithMany("TwoFATokens")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("CoachOnline.Model.User", b =>
                {
                    b.HasOne("CoachOnline.Model.Terms", "TermsAccepted")
                        .WithMany()
                        .HasForeignKey("TermsAcceptedId");

                    b.HasOne("CoachOnline.Model.CompanyInfo", "companyInfo")
                        .WithMany()
                        .HasForeignKey("companyInfoId");

                    b.Navigation("companyInfo");

                    b.Navigation("TermsAccepted");
                });

            modelBuilder.Entity("CoachOnline.Model.UserBillingPlan", b =>
                {
                    b.HasOne("CoachOnline.Model.BillingPlan", "BillingPlanType")
                        .WithMany("UserBillingPlans")
                        .HasForeignKey("BillingPlanTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoachOnline.Model.User", "User")
                        .WithMany("UserBillingPlans")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BillingPlanType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoachOnline.Model.UserLogins", b =>
                {
                    b.HasOne("CoachOnline.Model.User", "User")
                        .WithMany("UserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoachOnline.Model.UserStudentCard", b =>
                {
                    b.HasOne("CoachOnline.Model.UserBillingPlan", "UserBillingPlan")
                        .WithMany("StudentCardData")
                        .HasForeignKey("UserBillingPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserBillingPlan");
                });

            modelBuilder.Entity("CoachOnline.Model.Admin", b =>
                {
                    b.Navigation("AdminLogins");
                });

            modelBuilder.Entity("CoachOnline.Model.B2BAccount", b =>
                {
                    b.Navigation("AccessTokens");

                    b.Navigation("AccountSalesPersons");

                    b.Navigation("AvailableServices");
                });

            modelBuilder.Entity("CoachOnline.Model.BillingPlan", b =>
                {
                    b.Navigation("Price");

                    b.Navigation("UserBillingPlans");
                });

            modelBuilder.Entity("CoachOnline.Model.Category", b =>
                {
                    b.Navigation("CategoryCourses");

                    b.Navigation("Children");
                });

            modelBuilder.Entity("CoachOnline.Model.CoachBalanceMonth", b =>
                {
                    b.Navigation("DayBalances");
                });

            modelBuilder.Entity("CoachOnline.Model.Course", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Episodes");

                    b.Navigation("Evaluations");

                    b.Navigation("RejectionsHistory");
                });

            modelBuilder.Entity("CoachOnline.Model.CourseComment", b =>
                {
                    b.Navigation("Responses");
                });

            modelBuilder.Entity("CoachOnline.Model.Episode", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("CoachOnline.Model.Event", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Categories");

                    b.Navigation("Participants");

                    b.Navigation("Partners");
                });

            modelBuilder.Entity("CoachOnline.Model.FAQCategory", b =>
                {
                    b.Navigation("Topics");
                });

            modelBuilder.Entity("CoachOnline.Model.LibraryAccount", b =>
                {
                    b.Navigation("AccessTokens");

                    b.Navigation("Referents");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("CoachOnline.Model.Questionnaire", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Options");
                });

            modelBuilder.Entity("CoachOnline.Model.RequestedPayment", b =>
                {
                    b.Navigation("CoachPayments");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("CoachOnline.Model.StudentCourse", b =>
                {
                    b.Navigation("StudentEpisodes");
                });

            modelBuilder.Entity("CoachOnline.Model.User", b =>
                {
                    b.Navigation("AccountCategories");

                    b.Navigation("OwnedCourses");

                    b.Navigation("TwoFATokens");

                    b.Navigation("UserBillingPlans");

                    b.Navigation("UserLogins");
                });

            modelBuilder.Entity("CoachOnline.Model.UserBillingPlan", b =>
                {
                    b.Navigation("StudentCardData");

                    b.Navigation("StudentCardRejection");
                });
#pragma warning restore 612, 618
        }
    }
}
